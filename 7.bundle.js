(window.webpackJsonp=window.webpackJsonp||[]).push([[7,12],{249:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(27);\n\n\n\nfunction capitalizeFirstLetter(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nvar TaskList = function TaskList(props) {\n  var indent = [];\n  if (props.tasks) props.tasks.forEach(function (prop) {\n    if (prop !== \'empty\') indent.push(react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option", {\n      key: prop,\n      value: prop\n    }, capitalizeFirstLetter(prop)));\n  });\n  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("select", {\n    className: "focus__btnPanel-tasks",\n    onChange: function onChange(e) {\n      props.onTaskChange(e.target.value);\n    }\n  }, indent);\n};\n\nvar mapsStateToProps = function mapsStateToProps(state) {\n  return {\n    tasks: !!state.tasks ? Object.keys(state.tasks) : false\n  };\n};\n\nvar ConnectedTaskList = Object(react_redux__WEBPACK_IMPORTED_MODULE_1__[/* connect */ "b"])(mapsStateToProps)(TaskList);\n/* harmony default export */ __webpack_exports__["default"] = (ConnectedTaskList);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQ5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL0NvbXBvbmVudHMvQXRvbWljQ29tcG9uZW50cy9UYXNrTGlzdC5qcz8wMDZkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQge2Nvbm5lY3R9IGZyb20gJ3JlYWN0LXJlZHV4JztcblxuZnVuY3Rpb24gY2FwaXRhbGl6ZUZpcnN0TGV0dGVyKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSk7XG59XG5cbmNvbnN0IFRhc2tMaXN0ID0gKHByb3BzKSA9PiB7XG4gICAgbGV0IGluZGVudCA9IFtdO1xuICAgIFxuICAgIGlmKHByb3BzLnRhc2tzKVxuICAgICAgICBwcm9wcy50YXNrcy5mb3JFYWNoKHByb3AgPT4ge1xuICAgICAgICAgICAgaWYocHJvcCAhPT0gJ2VtcHR5JylcbiAgICAgICAgICAgICAgICBpbmRlbnQucHVzaCg8b3B0aW9uIGtleT17cHJvcH0gdmFsdWU9e3Byb3B9PntjYXBpdGFsaXplRmlyc3RMZXR0ZXIocHJvcCl9PC9vcHRpb24+KVxuICAgICAgICB9KTtcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxzZWxlY3QgY2xhc3NOYW1lPSdmb2N1c19fYnRuUGFuZWwtdGFza3MnIG9uQ2hhbmdlPXsoZSk9PntcbiAgICAgICAgICAgIHByb3BzLm9uVGFza0NoYW5nZShlLnRhcmdldC52YWx1ZSlcbiAgICAgICAgfX0+XG4gICAgICAgICAgICB7aW5kZW50fVxuICAgICAgICA8L3NlbGVjdD5cbiAgICApXG59O1xuXG5jb25zdCBtYXBzU3RhdGVUb1Byb3BzID0gKHN0YXRlKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGFza3M6ICEhc3RhdGUudGFza3M/T2JqZWN0LmtleXMoc3RhdGUudGFza3MpOmZhbHNlXG4gICAgfVxufVxuY29uc3QgQ29ubmVjdGVkVGFza0xpc3QgPSBjb25uZWN0KG1hcHNTdGF0ZVRvUHJvcHMpKFRhc2tMaXN0KTtcblxuZXhwb3J0IGRlZmF1bHQgQ29ubmVjdGVkVGFza0xpc3Q7Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUFBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFGQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUdBO0FBQ0E7QUFBQTtBQUVBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///249\n')},457:function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "assets/refresh-button.svg";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDU3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9yZWZyZXNoLWJ1dHRvbi5zdmc/OTU2NiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJhc3NldHMvcmVmcmVzaC1idXR0b24uc3ZnXCI7Il0sIm1hcHBpbmdzIjoiQUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///457\n')},482:function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(0);\nvar react_default = /*#__PURE__*/__webpack_require__.n(react);\n\n// EXTERNAL MODULE: ./node_modules/react-redux/es/index.js + 17 modules\nvar es = __webpack_require__(27);\n\n// EXTERNAL MODULE: ./node_modules/moment/moment.js\nvar moment = __webpack_require__(20);\nvar moment_default = /*#__PURE__*/__webpack_require__.n(moment);\n\n// EXTERNAL MODULE: ./src/Components/AtomicComponents/TaskList.js\nvar TaskList = __webpack_require__(249);\n\n// EXTERNAL MODULE: ./node_modules/react-chartjs-2/es/index.js\nvar react_chartjs_2_es = __webpack_require__(364);\n\n// CONCATENATED MODULE: ./src/Components/AtomicComponents/Chart.js\n\n\n\nvar Chart_Chart = function Chart(props) {\n  if (props.type === \'bar\') return react_default.a.createElement(react_chartjs_2_es["a" /* Bar */], {\n    data: props.data,\n    options: {\n      title: {\n        display: true,\n        fontSize: 18,\n        text: props.title\n      },\n      legend: false\n    }\n  });else if (props.type === \'line\') return react_default.a.createElement(react_chartjs_2_es["c" /* Line */], {\n    data: props.data,\n    options: {\n      title: {\n        display: true,\n        fontSize: 18,\n        text: props.title\n      },\n      legend: false,\n      maintainAspectRatio: false,\n      responsive: true\n    }\n  });else if (props.type === \'doughnut\') return react_default.a.createElement("div", {\n    className: "doughnutChart"\n  }, react_default.a.createElement(react_chartjs_2_es["b" /* Doughnut */], {\n    data: props.data,\n    options: {\n      title: {\n        display: true,\n        fontSize: 18,\n        text: props.title\n      },\n      legend: false,\n      maintainAspectRatio: false,\n      responsive: true\n    }\n  }), react_default.a.createElement("div", {\n    className: "stats__doughnut-legend"\n  }, react_default.a.createElement("span", {\n    className: "stats__doughnut-legend-completed"\n  }, "Completed"), react_default.a.createElement("span", {\n    className: "stats__doughnut-legend-incomplete"\n  }, "Incomplete")));\n};\n\n/* harmony default export */ var AtomicComponents_Chart = (Chart_Chart);\n// EXTERNAL MODULE: ./src/firebase/firebase.js\nvar firebase = __webpack_require__(29);\n\n// EXTERNAL MODULE: ./src/assets/refresh-button.svg\nvar refresh_button = __webpack_require__(457);\nvar refresh_button_default = /*#__PURE__*/__webpack_require__.n(refresh_button);\n\n// CONCATENATED MODULE: ./src/Components/Stats.js\nfunction _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === \'function\') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\n\nvar Stats_Stats =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Stats, _Component);\n\n  function Stats(props) {\n    var _this;\n\n    _classCallCheck(this, Stats);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Stats).call(this, props));\n    /*the state contains value for the dropdown lists as those change,\n     what is rendered in the component should also change*/\n\n    _defineProperty(_assertThisInitialized(_this), "filterFetchedDataByDays", function (days) {\n      var beginDate;\n      if (days === \'month\') beginDate = moment_default()().subtract(1, \'month\').calendar().split(\'/\');else if (days === \'6months\') beginDate = moment_default()().subtract(6, \'month\').calendar().split(\'/\');else if (typeof days === \'number\') beginDate = moment_default()().subtract(days, \'days\').calendar().split(\'/\'); //logic for extrating datelist\n\n      /*this logic is flawed and the whole logic should be implemented in a backend \n      since all lot of extracting needs to be done which will\n       spoil the user experience */\n\n      beginDate = beginDate[2] + beginDate[0] + beginDate[1];\n      var dateList;\n      var allDatesInDB = Object.keys(_this.fetchedData).sort().reverse();\n\n      if (allDatesInDB.indexOf(beginDate) === -1) {\n        var diff = 10000,\n            indx;\n        allDatesInDB.every(function (date) {\n          if (parseInt(date) - parseInt(beginDate) < 0) return false;\n\n          if (parseInt(date) - parseInt(beginDate) < diff) {\n            diff = parseInt(date) - parseInt(beginDate);\n            indx = allDatesInDB.indexOf(date);\n          }\n\n          return true;\n        });\n        dateList = allDatesInDB.slice(allDatesInDB.indexOf(_this.props.date), allDatesInDB.indexOf(indx));\n      } else dateList = allDatesInDB.slice(allDatesInDB.indexOf(_this.props.date), allDatesInDB.indexOf(beginDate));\n\n      dateList.forEach(function (date) {\n        _this.filteredData[date] = _this.fetchedData[date];\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), "filterDataByTasks", function () {\n      if (_this.fetchedData[_this.state.dashboard.task]) _this.filteredData = _this.fetchedData[_this.state.dashboard.task];\n    });\n\n    _defineProperty(_assertThisInitialized(_this), "extractDatesLabel", function () {\n      _this.dateLabelList = [];\n      Object.keys(_this.filteredData).forEach(function (date) {\n        _this.dateLabelList.push(date.split(\'\').slice(6, 8).join(\'\') + \':\' + date.split(\'\').slice(4, 6).join(\'\') + \':\' + date.split(\'\').slice(0, 4).join(\'\'));\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), "fetchData", function () {\n      _this.fetchedData = undefined;\n      _this.filteredData = {}; //Logic when data to be fetched is of today\n\n      if (_this.state.dashboard.rangeOfData === \'today\') {\n        firebase["a" /* default */].ref("users/".concat(_this.props.uid, "/data/").concat(_this.props.date)).once("value", function (snapshot) {\n          if (snapshot.val()) {\n            _this.fetchedData = snapshot.val();\n          }\n        }).then(function () {\n          //******LOGIC TO FILTER DATA*******\n          //if data is to be filtered for a specific task for today\n          if (_this.state.dashboard.displayBy === \'tasks\') {\n            _this.filterDataByTasks(); //setting state to map data\n\n\n            _this.setState(function (state) {\n              return _objectSpread({}, state, {\n                type: \'bar\',\n                data: {\n                  labels: Object.keys(_this.filteredData),\n                  datasets: [{\n                    label: \'Sessions\',\n                    data: Object.values(_this.filteredData).concat(0),\n                    backgroundColor: [\'rgba(31, 221, 114, 0.6)\', \'rgba(255, 75, 30, 0.6)\']\n                  }]\n                }\n              });\n            }); //if data is to be filtered for all tasks for today\n\n          } else if (_this.state.dashboard.displayBy === \'all\') {\n            var labels = Object.keys(_this.fetchedData);\n            var completed = [],\n                incomplete = [];\n            labels.forEach(function (label) {\n              completed.push(_this.fetchedData[label].completed);\n              incomplete.push(_this.fetchedData[label].incomplete);\n            });\n\n            _this.setState(function (state) {\n              return _objectSpread({}, state, {\n                type: \'doughnut\',\n                data: {\n                  labels: labels,\n                  datasets: [{\n                    label: \'completed\',\n                    data: completed.concat(0),\n                    backgroundColor: \'rgba(31, 221, 114, 0.6)\'\n                  }, {\n                    label: \'incomplete\',\n                    data: incomplete.concat(0),\n                    backgroundColor: \'rgba(255, 75, 30, 0.6)\'\n                  }]\n                }\n              });\n            });\n          }\n        }); //below is logic when data to be fetched is for some certain no of past days \n      } else {\n        var fetchDays;\n        if (_this.state.dashboard.rangeOfData === \'week\') fetchDays = 7;else if (_this.state.dashboard.rangeOfData === \'month\') fetchDays = \'month\';else if (_this.state.dashboard.rangeOfData === \'6months\') fetchDays = \'6months\'; //so get all the data at once and then filter that locally rather than fetching data for each day \n\n        firebase["a" /* default */].ref("users/".concat(_this.props.uid, "/data")).once("value", function (snapshot) {\n          if (snapshot.val()) {\n            if (snapshot.val()) _this.fetchedData = snapshot.val();\n          }\n        }).then(function () {\n          /*filtering data for a specified number of days */\n          _this.filterFetchedDataByDays(fetchDays);\n\n          if (_this.state.dashboard.displayBy === \'tasks\') {\n            //getting the labels and filtering them according to availability of the task on that date\n            //================***********================\n            var labels = Object.keys(_this.filteredData);\n            labels = labels.filter(function (key) {\n              if (Object.keys(_this.filteredData[key]).includes(!_this.state.dashboard.task ? _this.props.intialTask : _this.state.dashboard.task)) return true;\n            }); //=================***********================\n\n            var completed = [],\n                incomplete = []; //fetching completed and incomplete session for the available date for the sellected task\n\n            labels.forEach(function (date) {\n              completed.push(_this.filteredData[date][!_this.state.dashboard.task ? _this.props.intialTask : _this.state.dashboard.task].completed);\n              incomplete.push(_this.filteredData[date][!_this.state.dashboard.task ? _this.props.intialTask : _this.state.dashboard.task].incomplete);\n            });\n\n            _this.extractDatesLabel(); //setting state to map data\n\n\n            _this.setState(function (state) {\n              return _objectSpread({}, state, {\n                type: \'line\',\n                data: {\n                  labels: _this.dateLabelList,\n                  datasets: [{\n                    label: \'Completed\',\n                    data: completed.concat(0),\n                    borderColor: \'rgba(31, 221, 114, 0.6)\',\n                    pointHoverBackgroundColor: \'rgba(31, 221, 114, 0.6)\',\n                    fill: false\n                  }, {\n                    label: \'Incomplete\',\n                    data: incomplete.concat(0),\n                    borderColor: \'rgba(255, 75, 30, 0.6)\',\n                    pointHoverBackgroundColor: \'rgba(255, 75, 30, 0.6)\',\n                    fill: false\n                  }]\n                }\n              });\n            });\n          } else if (_this.state.dashboard.displayBy === \'all\') {\n            //got the date list\n            var dateList = Object.keys(_this.filteredData);\n            var _labels = []; //fetching the tasks for labels\n\n            dateList.forEach(function (date) {\n              Object.keys(_this.filteredData[date]).forEach(function (label) {\n                if (!_labels.includes(label)) _labels.push(label);\n              });\n            });\n            var _completed = [],\n                tempPushcompleted = [],\n                _incomplete = [],\n                tempPushincomplete = []; //summing up total complete and incomplete sessions for each task\n\n            _labels.forEach(function (label) {\n              tempPushcompleted = [], tempPushincomplete = [];\n              dateList.forEach(function (date) {\n                if (_this.filteredData[date][label]) {\n                  tempPushcompleted.push(_this.filteredData[date][label].completed);\n                  tempPushincomplete.push(_this.filteredData[date][label].incomplete);\n                }\n              });\n\n              if (tempPushcompleted.length) {\n                var sum = tempPushcompleted.reduce(function (accumulator, a) {\n                  return accumulator + a;\n                });\n\n                _completed.push(sum);\n              }\n\n              if (tempPushincomplete.length) {\n                var _sum = tempPushincomplete.reduce(function (accumulator, a) {\n                  return accumulator + a;\n                });\n\n                _incomplete.push(_sum);\n              }\n            });\n\n            _this.setState(function (state) {\n              return _objectSpread({}, state, {\n                type: \'doughnut\',\n                data: {\n                  labels: _labels,\n                  datasets: [{\n                    label: \'completed\',\n                    data: _completed.concat(0),\n                    backgroundColor: \'rgba(31, 221, 114, 0.6)\'\n                  }, {\n                    label: \'incomplete\',\n                    data: _incomplete.concat(0),\n                    backgroundColor: \'rgba(255, 75, 30, 0.6)\'\n                  }]\n                }\n              });\n            });\n          }\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), "handleOnChange", function (identifier, value) {\n      var Dash = _this.state.dashboard;\n      Dash[identifier] = value;\n\n      _this.setState(function (state) {\n        return _objectSpread({}, state, {\n          dashboard: Dash\n        });\n      });\n\n      _this.fetchData();\n    });\n\n    _this.state = {\n      dashboard: {\n        displayBy: \'tasks\',\n        rangeOfData: \'today\',\n        task: \'\'\n      },\n      data: {},\n      type: \'\',\n      rotateClass: \'stats__chartboard\'\n    };\n    _this.fetchedData = undefined;\n    _this.filteredData = {};\n    _this.dateLabelList = [];\n    return _this;\n  }\n\n  _createClass(Stats, [{\n    key: "componentDidMount",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.setState(function (state) {\n        return _objectSpread({}, state, {\n          dashboard: {\n            displayBy: \'tasks\',\n            rangeOfData: \'today\',\n            task: _this2.props.intialTask\n          }\n        });\n      });\n    }\n    /*As you will notice below on every change to the dropdown list "handleOnChange()" is called*/\n\n  }, {\n    key: "render",\n    value: function render() {\n      var _this3 = this;\n\n      return react_default.a.createElement("div", {\n        className: "stats"\n      }, react_default.a.createElement("div", {\n        className: "stats__dashboard"\n      }, react_default.a.createElement("select", {\n        name: "displayBy",\n        className: "focus__btnPanel-tasks",\n        onChange: function onChange(e) {\n          _this3.handleOnChange(\'displayBy\', e.target.value);\n        }\n      }, react_default.a.createElement("option", {\n        value: "tasks"\n      }, "By Tasks"), react_default.a.createElement("option", {\n        value: "all"\n      }, "All")), react_default.a.createElement("select", {\n        name: "rangeOfData",\n        className: "focus__btnPanel-tasks",\n        onChange: function onChange(e) {\n          _this3.handleOnChange(\'rangeOfData\', e.target.value);\n        }\n      }, react_default.a.createElement("option", {\n        value: "today"\n      }, "Today"), react_default.a.createElement("option", {\n        value: "week"\n      }, "Last week"), react_default.a.createElement("option", {\n        value: "month"\n      }, "Last month"), react_default.a.createElement("option", {\n        value: "6months"\n      }, "Last 6 months")), this.state.dashboard.displayBy === \'tasks\' && react_default.a.createElement(TaskList["default"], {\n        onTaskChange: function onTaskChange(task) {\n          _this3.handleOnChange(\'task\', task);\n        }\n      })), react_default.a.createElement("div", {\n        className: "stats__rotate",\n        onClick: function onClick() {\n          _this3.setState(function (state) {\n            return _objectSpread({}, state, {\n              rotateClass: state.rotateClass === \'stats__chartboard active\' ? \'stats__chartboard\' : \'stats__chartboard active\'\n            });\n          });\n        }\n      }, react_default.a.createElement("img", {\n        className: "stats__rotate-img",\n        src: refresh_button_default.a\n      })), react_default.a.createElement("div", {\n        className: this.state.rotateClass\n      }, this.state.type && react_default.a.createElement(AtomicComponents_Chart, {\n        data: this.state.data,\n        title: this.state.dashboard.task.toUpperCase(),\n        type: this.state.type\n      })));\n    }\n  }]);\n\n  return Stats;\n}(react["Component"]);\n\n;\n\nvar mapStateToProps = function mapStateToProps(store) {\n  return {\n    uid: store.auth.cred.uid,\n    date: Object.keys(store.data)[0],\n    intialTask: Object.keys(store.tasks)[0]\n  };\n};\n\n/* harmony default export */ var Components_Stats = __webpack_exports__["default"] = (Object(es["b" /* connect */])(mapStateToProps)(Stats_Stats));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///482\n')}}]);